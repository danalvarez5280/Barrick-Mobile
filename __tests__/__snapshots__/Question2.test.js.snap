// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<RCTScrollView
  automaticallyAdjustContentInsets={false}
  contentContainerStyle={
    Object {
      "display": "flex",
      "flexDirection": "column",
      "height": 670,
      "justifyContent": "space-between",
      "marginTop": 0,
      "padding": 0,
      "width": "100%",
    }
  }
  contentInset={
    Object {
      "bottom": 0,
    }
  }
  enableAutoAutomaticScroll={true}
  enableResetScrollToCoords={true}
  extraHeight={75}
  extraScrollHeight={0}
  keyboardDismissMode="interactive"
  keyboardOpeningTime={250}
  onScroll={[Function]}
  scrollEnabled={true}
  scrollEventThrottle={0}
  showsVerticalScrollIndicator={true}
>
  <View>
    <View
      style={
        Object {
          "alignItems": "center",
          "display": "flex",
          "flexDirection": "column",
          "justifyContent": "center",
          "marginTop": 0,
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "backgroundColor": "#C4900F",
            "color": "#122732",
            "fontWeight": "bold",
            "marginTop": 10,
            "padding": 5,
            "textAlign": "center",
            "width": 250,
          }
        }
      >
        Select the Risk Level
      </Text>
      <Image
        source={
          Object {
            "testUri": "../../../components/assets/shield.png",
          }
        }
        style={
          Object {
            "height": 80,
            "margin": 15,
            "width": 80,
          }
        }
      />
      <RCTSlider
        disabled={false}
        enabled={true}
        maximumTrackTintColor="green"
        maximumValue={7}
        minimumTrackTintColor="red"
        minimumValue={1}
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onSlidingComplete={[Function]}
        onStartShouldSetResponder={[Function]}
        onValueChange={[Function]}
        step={1}
        style={
          Array [
            Object {
              "height": 40,
            },
            Object {
              "width": 200,
            },
          ]
        }
        value={1}
      />
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        1
      </Text>
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "backgroundColor": "#C4900F",
            "color": "#122732",
            "fontWeight": "bold",
            "marginTop": 10,
            "padding": 5,
            "textAlign": "center",
            "width": 250,
          }
        }
      >
        Specific Risks
      </Text>
      <TextInput
        allowFontScaling={true}
        multiline={true}
        onChangeText={[Function]}
        placeholder="Specific Risk"
        style={
          Object {
            "backgroundColor": "#CED5E0",
            "color": "#122732",
            "fontSize": 20,
            "height": 50,
            "marginBottom": 10,
            "padding": 5,
            "width": 250,
          }
        }
        value="working near gas line"
      />
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "backgroundColor": "#C4900F",
            "color": "#122732",
            "fontWeight": "bold",
            "marginTop": 10,
            "padding": 5,
            "textAlign": "center",
            "width": 250,
          }
        }
      >
        Other Risks
      </Text>
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        hasTVPreferredFocus={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
            },
            undefined,
          ]
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#122732",
              "borderRadius": 15,
              "display": "flex",
              "flexDirection": "row",
              "height": 40,
              "marginTop": 10,
              "padding": 5,
              "width": 225,
            }
          }
        >
          <Image
            source={
              Object {
                "testUri": "../../../components/assets/not-checked.png",
              }
            }
            style={
              Object {
                "height": 24,
                "width": 24,
              }
            }
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "white",
                "fontSize": 12,
                "fontWeight": "bold",
                "marginLeft": 20,
              }
            }
          >
            grab hard hat
          </Text>
        </View>
      </View>
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        hasTVPreferredFocus={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
            },
            undefined,
          ]
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#122732",
              "borderRadius": 15,
              "display": "flex",
              "flexDirection": "row",
              "height": 40,
              "marginTop": 10,
              "padding": 5,
              "width": 225,
            }
          }
        >
          <Image
            source={
              Object {
                "testUri": "../../../components/assets/not-checked.png",
              }
            }
            style={
              Object {
                "height": 24,
                "width": 24,
              }
            }
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "white",
                "fontSize": 12,
                "fontWeight": "bold",
                "marginLeft": 20,
              }
            }
          >
            be safe
          </Text>
        </View>
      </View>
      <View
        accessibilityComponentType="button"
        accessibilityLabel={undefined}
        accessibilityTraits={
          Array [
            "button",
          ]
        }
        accessible={true}
        collapsable={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            disabled={undefined}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "padding": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            SUBMIT
          </Text>
        </View>
      </View>
      <View
        accessibilityComponentType="button"
        accessibilityLabel={undefined}
        accessibilityTraits={
          Array [
            "button",
          ]
        }
        accessible={true}
        collapsable={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            disabled={undefined}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "padding": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            BACK
          </Text>
        </View>
      </View>
      <View
        accessibilityComponentType="button"
        accessibilityLabel={undefined}
        accessibilityTraits={
          Array [
            "button",
          ]
        }
        accessible={true}
        collapsable={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            disabled={undefined}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "padding": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            LOG OUT
          </Text>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;
